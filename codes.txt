const displayMovements = function(movements){
  containerMovements.innerHTML = "";
  movements.forEach(function(mov, index){
    const type = mov > 0 ? "deposit" : "withdrawal";
    const html = `
            <div class="movements__row">
          <div class="movements__type movements__type--${type}">${index + 1} ${type}</div>
          <div class="movements__value">${mov}€</div>
        </div>
    `;
    containerMovements.insertAdjacentHTML("afterbegin", html)
  });
};






// VIDEO 152 - USAGE OF MAP FOR THE EXAMPLE
// const createUsernames = function(user){
//   const userName = user.toLowerCase().split(" ").map(name => name[0]
//   ).join("");
//   return userName;
// }

// const user = 'Steven Thomas Williams';
// console.log(createUsernames(user));



// VIDEO 152 - USAGE OF FOREACH AND MAP FOR THE EXAMPLE
const createUsernames = function(accs){
  accs.forEach(function(acc){
    acc.userName = acc.owner.toLowerCase().split(" ").map(name => name[0]
    ).join("");
  });
};
createUsernames(accounts);

const updateUi = function(acc){
      // display movements
      displayMovements(acc.movements);
      // display balance
      calcDisplayBalance(acc);
      // display summary
      calcDisplaySummary(acc);
}

// TOP DISPLAY
const calcDisplayBalance = function(acc){
  const balance = acc.movements.reduce((acc, mov) => acc + mov, 0);
  labelBalance.textContent = `${acc.balance} EUR`;
}



const calcDisplaySummary = function(account){
  const incomes = account.movements.filter(mov => mov > 0).reduce((acc, mov) => acc + mov, 0);
  labelSumIn.textContent = `${incomes}€`;


  const out = account.movements.filter(mov => mov < 0).reduce((acc, mov) => acc + mov, 0);
  labelSumOut.textContent = `${Math.abs(out)}€`;


  const interest = account.movements.filter(mov => mov > 0).map(deposit => (deposit * account.interestRate)/100)
  .filter(int => int >= 1)
  .reduce((acc, int) => acc + int, 0);
  labelSumInterest.textContent = `${interest}€`;
};





let currentAccount;
btnLogin.addEventListener("click", function(e){
  e.preventDefault();

  currentAccount = accounts.find(acc => acc.userName === inputLoginUsername.value);
  if(currentAccount?.pin === Number(inputLoginPin.value)){
    // display ui and welcome message
    labelWelcome.textContent = `Welcome back, ${currentAccount.owner.split("")[0]}`;
    containerApp.style.opacity = 100;

    // clear the input fields
    inputLoginUsername.value = inputLoginPin.value = "";
    inputLoginPin.blur();
    updateUi(currentAccount);
  }
});





btnTransfer.addEventListener("click", function(e){
  e.preventDefault();
  const amount = Number(inputTransferAmount.value);
  const receiverAcc = accounts.find(acc => acc.userName === inputTransferTo.value);
  inputTransferAmount.value = inputTransferTo.value = "";
  console.log(amount, receiverAcc);
  console.log(amount > 0);
  console.log(receiverAcc); // false
  console.log(currentAccount.balance >= amount);
  console.log(receiverAcc?.userName !== currentAccount.userName);
  if(amount > 0 && receiverAcc && currentAccount.balance >= amount && receiverAcc?.userName !== currentAccount.userName){
    console.log("Transfer valid");
  }
  // doing the transfer
  currentAccount.movements.push(-amount);
  receiverAcc.movements.push(amount);

  // update ui
  updateUi(currentAccount);
});



btnClose.addEventListener("click", function(e){
  e.preventDefault();
  if(inputCloseUsername.value === currentAccount.userName && Number(inputClosePin.value) === currentAccount.pin){
    const index = accounts.findIndex(acc => acc.userName === currentAccount.userName)
    // accounts.splice(index, 1);

    // hide UI
    containerApp.style.opacity = 0;
  }
});
